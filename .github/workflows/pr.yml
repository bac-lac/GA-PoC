name: Pull Request

on:
  pull_request:
    branches:
      - main

env:
  AWS_REGION : "ca-central-1"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  REPOSITORY: mft
  IMAGE_TAG: "${{ github.head_ref || github.ref_name }}-${{github.sha}}"
  ECR_REGISTRY: ""

permissions:
      id-token: write
      contents: read

jobs:
  Code-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run shellcheck
        uses: sudo-bot/action-shellcheck@latest
        with:
          cli-args: "./docker/scripts/*.sh"
      
      - name: Checkov security scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terraform
          output_format: cli

  Build:
    needs: Code-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.AWS_GITHUB_DEVOPS_ROLE}}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{env.AWS_REGION}}
          role-skip-session-tagging: true
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Set ECR Registry 
        id: set-ecr
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-push
        working-directory: ./docker
        run: |
          docker build -t ${{env.ECR_REGISTRY}}/${{env.REPOSITORY}}:${{env.IMAGE_TAG}} .
          docker push ${{env.ECR_REGISTRY}}/${{env.REPOSITORY}}:${{env.IMAGE_TAG}}

  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    environment: "dev"
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.AWS_GITHUB_DEVOPS_ROLE}}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{env.AWS_REGION}}
          role-skip-session-tagging: true
          audience: sts.amazonaws.com

      - name: Terraform-Setup
        id: Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: true

      - name: Terraform-Init
        id: Init
        run: terraform init 
            -backend-config="dynamodb_table=terraform-state-${{vars.ENV}}" 
            -backend-config="key=${{vars.ENV}}/${{env.BRANCH_NAME}}/terraform.tfstate"

      - name: Terraform-Plan
        id: Plan
        run: terraform plan 
          -var ENV=${{vars.ENV}}
          -var ACCOUNT=${{secrets.ACCOUNT}}
          -var ADMIN_DB_USERNAME=${{secrets.ADMIN_DB_USERNAME}}
          -var ADMIN_DB_PASSWORD=${{secrets.ADMIN_DB_PASSWORD}}
          -var DB_USERNAME=${{secrets.DB_USERNAME}}
          -var DB_PASSWORD=${{secrets.DB_PASSWORD}}
          -var BRANCH_NAME=${{env.BRANCH_NAME}}
          -var VPC_ID=${{secrets.VPC_ID}}
          -var ECR_IMAGE=${{env.ECR_REGISTRY}}/${{env.REPOSITORY}}:${{env.BRANCH_NAME}}-${{github.sha}}

      - name: Terraform-Apply
        id: Apply
        run: terraform apply 
          -var ENV=${{vars.ENV}}
          -var ACCOUNT=${{secrets.ACCOUNT}}
          -var ADMIN_DB_USERNAME=${{secrets.ADMIN_DB_USERNAME}}
          -var ADMIN_DB_PASSWORD=${{secrets.ADMIN_DB_PASSWORD}}
          -var DB_USERNAME=${{secrets.DB_USERNAME}}
          -var DB_PASSWORD=${{secrets.DB_PASSWORD}}
          -var BRANCH_NAME=${{env.BRANCH_NAME}}
          -var VPC_ID=${{secrets.VPC_ID}}
          -var ECR_IMAGE=${{env.ECR_REGISTRY}}/${{env.REPOSITORY}}:${{env.BRANCH_NAME}}-${{github.sha}}
          -auto-approve
