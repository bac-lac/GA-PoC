name: Pull Request

on:
  pull_request:
    branches:
      - main

env:
  AWS_REGION : "ca-central-1"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  IMAGE_REPO_TAG: mft:${{ github.head_ref || github.ref_name }}-${{github.sha}}

permissions:
      id-token: write
      contents: read

jobs:
  Code-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run shellcheck
        uses: sudo-bot/action-shellcheck@latest
        with:
          cli-args: "./docker/scripts/*.sh"
      
      - name: Checkov security scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terraform
          output_format: cli

  # Build:
  #   needs: Code-check
  #   runs-on: ubuntu-latest
  #   outputs:
  #     ecr_registry: ${{ steps.login-ecr.outputs.registry }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{secrets.AWS_GITHUB_DEVOPS_ROLE}}
  #         role-session-name: GitHub_to_AWS_via_FederatedOIDC
  #         aws-region: ${{env.AWS_REGION}}
  #         role-skip-session-tagging: true
  #         audience: sts.amazonaws.com

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Build, tag, and push docker image to Amazon ECR
  #       id: build-push
  #       working-directory: ./docker
  #       run: |
  #         docker build -t ${{steps.login-ecr.outputs.registry}}/${{ env.IMAGE_REPO_TAG }} .
  #         docker push ${{steps.login-ecr.outputs.registry}}/${{ env.IMAGE_REPO_TAG }}

  Deploy:
    # needs: Build
    runs-on: ubuntu-latest
    environment: "pr"
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.AWS_GITHUB_DEVOPS_ROLE}}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{env.AWS_REGION}}
          role-skip-session-tagging: true
          audience: sts.amazonaws.com

      - name: Setup Terraform variables
        id: vars
        run: |-
          cat > pipeline.auto.tfvars <<EOF
          ACCOUNT = "${{ secrets.ACCOUNT }}"
          ADMIN_DB_PASSWORD = "${{ secrets.ADMIN_DB_PASSWORD }}"
          ADMIN_DB_USERNAME = "${{ secrets.ADMIN_DB_USERNAME }}"
          BRANCH_NAME = "${{ env.BRANCH_NAME }}"
          DB_PASSWORD = "${{ secrets.DB_PASSWORD }}"
          DB_USERNAME = "${{ secrets.DB_USERNAME }}"
          ECR_IMAGE = "${{ needs.Build.outputs.ecr_registry }}/${{ env.IMAGE_REPO_TAG }}"
          ENV = "${{ vars.ENV }}"
          FORCE_REFRESH = "${{ vars.FORCE_REFRESH }}"
          MFT_CLUSTER = "${{ vars.MFT_CLUSTER }}"
          EOF
      - name: Generate task definition file
        uses: ./.github/actions/test
        with:
          BRANCH_NAME: "lol"
      - name: Print Terraform variables3
        id: print3
        run: cat pipeline.auto.tfvars3

      - name: Print Terraform variables
        id: print
        run: cat pipeline.auto.tfvars

      - name: Terraform-Setup
        id: Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: true

      - name: Terraform-Init
        id: Init
        run: terraform init 
            -backend-config="dynamodb_table=terraform-state-${{vars.ENV}}" 
            -backend-config="key=${{vars.ENV}}/${{env.BRANCH_NAME}}/terraform.tfstate"

      - name: Terraform-Plan
        id: Plan
        run: terraform plan -var-file="pipeline.auto.tfvars"

      # - name: Terraform-Apply
      #   id: Apply
      #   run: terraform apply -var-file="pipeline.auto.tfvars" -auto-approve
