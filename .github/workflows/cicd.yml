name: CI/CD

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Name of the environment to deploy"
        options:
        - dev
        - test
        - prod
  
env:
  AWS_REGION : "ca-central-1"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  IMAGE_REPO_TAG: mft:latest

permissions:
      id-token: write
      contents: read

jobs:
  Deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment == '' && 'dev' || inputs.environment }}
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.AWS_GITHUB_DEVOPS_ROLE}}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{env.AWS_REGION}}
          role-skip-session-tagging: true
          audience: sts.amazonaws.com
      
      - name: Login to Amazon ECR
        if: ${{vars.ENV == 'dev'}}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push
        if: ${{vars.ENV == 'dev'}}
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          file: ./docker/Dockerfile
          push: true
          tags: ${{steps.login-ecr.outputs.registry}}/${{ env.IMAGE_REPO_TAG }}
      
      - name: Create tfvars file
        uses: ./.github/actions/create-tfvars-file
        with:
          secrets: ${{ toJSON(secrets) }}
          vars: ${{ toJSON(vars) }}
            
      - name: Add Dynamic Variables to tfvars
        run: |
          echo 'BRANCH_NAME = "${{ env.BRANCH_NAME }}"' >> pipeline.auto.tfvars
          echo 'ECR_IMAGE = "${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_REPO_TAG }}@${{steps.build-push.outputs.digest}}"' >> pipeline.auto.tfvars

      - name: Terraform-Setup
        id: Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: true

      - name: Terraform-Init
        id: Init
        run: terraform init 
          -backend-config="dynamodb_table=terraform-state-${{vars.ENV}}" 
          -backend-config="key=${{vars.ENV}}/${{env.BRANCH_NAME}}/terraform.tfstate"

      - name: Terraform-Apply
        id: Apply
        run: terraform apply -var-file="pipeline.auto.tfvars" -auto-approve
